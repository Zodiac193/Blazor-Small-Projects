@page "/learnblazor/BlazorJs"
@inject IJSRuntime _IJSRuntime

<div class="row">
    <button class="btn btn-secondary m-2" style="width:200px;" @onclick="TestConfirmBox">Test Confirm Button </button>
</div>

<div class="row">
    @if (ConfirmResult)
    {
            <p>Confirmation has been made</p>        
    }
    else
    {


            <p>Pending Confirmation</p>
    }
</div>

<div class="row">
    <button class="btn btn-success m-2" style="width:200px;" @onclick="ToastrSuccess">Toastr Success </button>
    <button class="btn btn-danger m-2" style="width:200px;" @onclick="ToastrFailure">Toastr Failure </button>
</div>
<br /><br />

<div class="row">
    <button class="btn btn-success m-2" style="width:200px;" @onclick="SweetSuccess">Sweet Success </button>
    <button class="btn btn-danger m-2" style="width:200px;" @onclick="SweerFailure">Sweet Failure </button>
</div>




@code {
    public string ConfirmMessage = "Are you sure you want to click";

    private bool ConfirmResult {get;set;}

    private async Task TestConfirmBox()
    {
        ConfirmResult = await _IJSRuntime.InvokeAsync<bool>("confirm", ConfirmMessage);
    }
    //Toastr success
    private async Task ToastrSuccess()
    {
        await _IJSRuntime.ToastrSuccess("Succeful Message");
    }
    private async Task ToastrFailure()
    {
        await _IJSRuntime.ToastrFailure("Failure Message");
    }



    public async Task SweetSuccess()
    {
        await _IJSRuntime.InvokeVoidAsync("ShowSweet", "success","Task Completed");
    }
    public async Task SweerFailure()
    {
        await _IJSRuntime.InvokeVoidAsync("ShowSweet", "error", "Task Failed");
    }

}
